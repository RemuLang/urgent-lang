# this file is auto-generated by RBNF.hs and the Python package rbnf-rts

from rbnf_rts.rbnf_linker import link
from rbnf_rts.utils import ImmutableMap
from rbnf_rts.lexical import *
__all__ = ['lexicals', 'run_lexer', 'mk_parser']
(lexicals, run_lexer) = lexer(r(COMMENT='//[^\\n\\r]*|#[^\\n\\r]*'), r(FLOAT='[-+]?[0-9]+\\.\\d+([eE][-+]?\\d+)?|[-+]?[0-9]+[eE][-+]?\\d+'), r(INT='[-+]?\\d+'), r(UPPER="[A-Z][a-zA-Z0-9_\\u4e00-\\u9fa5]*'?"), r(LOWER="[a-z_\\u4e00-\\u9fa5][a-zA-Z0-9_\\u4e00-\\u9fa5]*'?"), r(STRING='"([^\\\\"]+|\\\\.)*?"'), r(SPECIAL='\\-\\>|\\=\\>|\\=\\=|\\='), r(OP='[\\+\\-\\*\\/\\@\\~\\%\\>\\<\\\\\\:\\!][\\\\\\+\\-\\*\\/\\@\\~\\%\\>\\<\\:\\|\\=\\^\\!]*'), r(SOP='\\|[\\+\\-\\*\\/\\@\\~\\%\\>\\<\\:\\|\\=\\^]+'), r(W='\\s+'), l['}'], l['{'], l['`'], l['^'], l[']'], l['['], l['?'], l['.'], l[','], l[')'], l['('], ignores=['W', 'COMMENT'], reserved_map=ImmutableMap.from_dict({'?': 'quote ?', 'else': 'quote else', 'match': 'quote match', 'let': 'quote let', 'def': 'quote def', '=': 'quote =', '!': 'quote !', ',': 'quote ,', 'rec': 'quote rec', 'do': 'quote do', 'open': 'quote open', 'import': 'quote import', 'infixl': 'quote infixl', 'infixr': 'quote infixr', 'data': 'quote data', '.': 'quote .', '_': 'quote _', '(': 'quote (', ')': 'quote )', '->': 'quote ->', 'or': 'quote or', 'and': 'quote and', 'in': 'quote in', '=>': 'quote =>', '^': 'quote ^', '::': 'quote ::', '==': 'quote ==', '`': 'quote `', '[': 'quote [', ']': 'quote ]', 'True': 'quote True', 'False': 'quote False', 'extern': 'quote extern', '{': 'quote {', '}': 'quote }'}), numbering={'BOF': 0, 'EOF': 1, 'quote ?': 2, 'quote else': 3, 'quote match': 4, 'quote let': 5, 'quote def': 6, 'quote =': 7, 'quote !': 8, 'quote ,': 9, 'quote rec': 10, 'quote do': 11, 'quote open': 12, 'quote import': 13, 'quote infixl': 14, 'quote infixr': 15, 'quote data': 16, 'quote .': 17, 'quote _': 18, 'quote (': 19, 'quote )': 20, 'quote ->': 21, 'quote or': 22, 'quote and': 23, 'quote in': 24, 'quote =>': 25, 'quote ^': 26, 'quote ::': 27, 'quote ==': 28, 'quote `': 29, 'quote [': 30, 'quote ]': 31, 'quote True': 32, 'quote False': 33, 'quote extern': 34, 'quote {': 35, 'quote }': 36, 'COMMENT': 37, 'FLOAT': 38, 'INT': 39, 'UPPER': 40, 'LOWER': 41, 'STRING': 42, 'SPECIAL': 43, 'OP': 44, 'SOP': 45, 'W': 46})



def mk_parser(Module, Do, Open, Cons, Data, Let, Infix, Fun, Import, If, Match, And, Or, Bin, Call, List, Tuple, Lit, Field, Coerce, Extern, Var, In, TCO, PyCall, DEREF, WILDCARD, DQString):
    from rbnf_rts.rts import AST as prim__mk__ast, Cons as prim__cons, _nil as prim__nil

    def lr_step_atomExpr(_slot_0, prim__state, prim__tokens):
        lcl_0 = 17
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote . not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = prim__tokens.offset
            _off_1 = lcl_1
            lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_1:
                lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_3 = lcl_3.idint
                if (lcl_3 == 29):
                    lcl_4 = parse_bop(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                        lcl_6 = _slot_0
                        lcl_7 = _slot_2
                        lcl_7 = lcl_7.value
                        lcl_5 = Field(lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 26):
                    lcl_4 = parse_bop(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                        lcl_6 = _slot_0
                        lcl_7 = _slot_2
                        lcl_7 = lcl_7.value
                        lcl_5 = Field(lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 28):
                    lcl_4 = parse_bop(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                        lcl_6 = _slot_0
                        lcl_7 = _slot_2
                        lcl_7 = lcl_7.value
                        lcl_5 = Field(lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 27):
                    lcl_4 = parse_bop(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                        lcl_6 = _slot_0
                        lcl_7 = _slot_2
                        lcl_7 = lcl_7.value
                        lcl_5 = Field(lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 19):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_4 = _py_local_t
                    _slot_2 = lcl_4
                    lcl_4 = prim__tokens.offset
                    _off_2 = lcl_4
                    lcl_4 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_4:
                        lcl_6 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_6 = lcl_6.idint
                        if (lcl_6 == 35):
                            lcl_7 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                            _slot_3_check = lcl_7
                            lcl_7 = _slot_3_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_3_check
                            else:
                                lcl_8 = _slot_3_check[1]
                                lcl_8 = lcl_8
                                _slot_3 = lcl_8
                                lcl_8 = 20
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_8):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_8 = _py_local_tk
                                _slot_4 = lcl_8
                                lcl_8 = (_slot_4 is None)
                                if lcl_8:
                                    lcl_9 = prim__tokens.offset
                                    lcl_9 = (lcl_9, 'quote ) not match')
                                    lcl_9 = prim__cons(lcl_9, prim__nil)
                                    lcl_9 = lcl_9
                                    lcl_9 = (False, lcl_9)
                                    lcl_8 = lcl_9
                                else:
                                    lcl_9 = _slot_0
                                    lcl_10 = _slot_3
                                    lcl_10 = PyCall(lcl_9, lcl_10)
                                    _slot_local__1 = lcl_10
                                    lcl_10 = (True, _slot_local__1)
                                    lcl_8 = lcl_10
                                lcl_7 = lcl_8
                            lcl_5 = lcl_7
                        elif (lcl_6 == 10):
                            lcl_10 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                            _slot_3_check = lcl_10
                            lcl_10 = _slot_3_check[0]
                            lcl_10 = (lcl_10 is False)
                            if lcl_10:
                                lcl_10 = _slot_3_check
                            else:
                                lcl_7 = _slot_3_check[1]
                                lcl_7 = lcl_7
                                _slot_3 = lcl_7
                                lcl_7 = 20
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_7):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_7 = _py_local_tk
                                _slot_4 = lcl_7
                                lcl_7 = (_slot_4 is None)
                                if lcl_7:
                                    lcl_8 = prim__tokens.offset
                                    lcl_8 = (lcl_8, 'quote ) not match')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_7 = lcl_8
                                else:
                                    lcl_8 = _slot_0
                                    lcl_9 = _slot_3
                                    lcl_8 = PyCall(lcl_8, lcl_9)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_7 = lcl_8
                                lcl_10 = lcl_7
                            lcl_5 = lcl_10
                        elif (lcl_6 == 12):
                            lcl_10 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                            _slot_3_check = lcl_10
                            lcl_10 = _slot_3_check[0]
                            lcl_10 = (lcl_10 is False)
                            if lcl_10:
                                lcl_10 = _slot_3_check
                            else:
                                lcl_7 = _slot_3_check[1]
                                lcl_7 = lcl_7
                                _slot_3 = lcl_7
                                lcl_7 = 20
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_7):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_7 = _py_local_tk
                                _slot_4 = lcl_7
                                lcl_7 = (_slot_4 is None)
                                if lcl_7:
                                    lcl_8 = prim__tokens.offset
                                    lcl_8 = (lcl_8, 'quote ) not match')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_7 = lcl_8
                                else:
                                    lcl_8 = _slot_0
                                    lcl_9 = _slot_3
                                    lcl_8 = PyCall(lcl_8, lcl_9)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_7 = lcl_8
                                lcl_10 = lcl_7
                            lcl_5 = lcl_10
                        elif (lcl_6 == 5):
                            lcl_10 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                            _slot_3_check = lcl_10
                            lcl_10 = _slot_3_check[0]
                            lcl_10 = (lcl_10 is False)
                            if lcl_10:
                                lcl_10 = _slot_3_check
                            else:
                                lcl_7 = _slot_3_check[1]
                                lcl_7 = lcl_7
                                _slot_3 = lcl_7
                                lcl_7 = 20
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_7):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_7 = _py_local_tk
                                _slot_4 = lcl_7
                                lcl_7 = (_slot_4 is None)
                                if lcl_7:
                                    lcl_8 = prim__tokens.offset
                                    lcl_8 = (lcl_8, 'quote ) not match')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_7 = lcl_8
                                else:
                                    lcl_8 = _slot_0
                                    lcl_9 = _slot_3
                                    lcl_8 = PyCall(lcl_8, lcl_9)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_7 = lcl_8
                                lcl_10 = lcl_7
                            lcl_5 = lcl_10
                        elif (lcl_6 == 15):
                            lcl_10 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                            _slot_3_check = lcl_10
                            lcl_10 = _slot_3_check[0]
                            lcl_10 = (lcl_10 is False)
                            if lcl_10:
                                lcl_10 = _slot_3_check
                            else:
                                lcl_7 = _slot_3_check[1]
                                lcl_7 = lcl_7
                                _slot_3 = lcl_7
                                lcl_7 = 20
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_7):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_7 = _py_local_tk
                                _slot_4 = lcl_7
                                lcl_7 = (_slot_4 is None)
                                if lcl_7:
                                    lcl_8 = prim__tokens.offset
                                    lcl_8 = (lcl_8, 'quote ) not match')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_7 = lcl_8
                                else:
                                    lcl_8 = _slot_0
                                    lcl_9 = _slot_3
                                    lcl_8 = PyCall(lcl_8, lcl_9)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_7 = lcl_8
                                lcl_10 = lcl_7
                            lcl_5 = lcl_10
                        elif (lcl_6 == 14):
                            lcl_10 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                            _slot_3_check = lcl_10
                            lcl_10 = _slot_3_check[0]
                            lcl_10 = (lcl_10 is False)
                            if lcl_10:
                                lcl_10 = _slot_3_check
                            else:
                                lcl_7 = _slot_3_check[1]
                                lcl_7 = lcl_7
                                _slot_3 = lcl_7
                                lcl_7 = 20
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_7):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_7 = _py_local_tk
                                _slot_4 = lcl_7
                                lcl_7 = (_slot_4 is None)
                                if lcl_7:
                                    lcl_8 = prim__tokens.offset
                                    lcl_8 = (lcl_8, 'quote ) not match')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_7 = lcl_8
                                else:
                                    lcl_8 = _slot_0
                                    lcl_9 = _slot_3
                                    lcl_8 = PyCall(lcl_8, lcl_9)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_7 = lcl_8
                                lcl_10 = lcl_7
                            lcl_5 = lcl_10
                        elif (lcl_6 == 13):
                            lcl_10 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                            _slot_3_check = lcl_10
                            lcl_10 = _slot_3_check[0]
                            lcl_10 = (lcl_10 is False)
                            if lcl_10:
                                lcl_10 = _slot_3_check
                            else:
                                lcl_7 = _slot_3_check[1]
                                lcl_7 = lcl_7
                                _slot_3 = lcl_7
                                lcl_7 = 20
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_7):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_7 = _py_local_tk
                                _slot_4 = lcl_7
                                lcl_7 = (_slot_4 is None)
                                if lcl_7:
                                    lcl_8 = prim__tokens.offset
                                    lcl_8 = (lcl_8, 'quote ) not match')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_7 = lcl_8
                                else:
                                    lcl_8 = _slot_0
                                    lcl_9 = _slot_3
                                    lcl_8 = PyCall(lcl_8, lcl_9)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_7 = lcl_8
                                lcl_10 = lcl_7
                            lcl_5 = lcl_10
                        elif (lcl_6 == 34):
                            lcl_10 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                            _slot_3_check = lcl_10
                            lcl_10 = _slot_3_check[0]
                            lcl_10 = (lcl_10 is False)
                            if lcl_10:
                                lcl_10 = _slot_3_check
                            else:
                                lcl_7 = _slot_3_check[1]
                                lcl_7 = lcl_7
                                _slot_3 = lcl_7
                                lcl_7 = 20
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_7):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_7 = _py_local_tk
                                _slot_4 = lcl_7
                                lcl_7 = (_slot_4 is None)
                                if lcl_7:
                                    lcl_8 = prim__tokens.offset
                                    lcl_8 = (lcl_8, 'quote ) not match')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_7 = lcl_8
                                else:
                                    lcl_8 = _slot_0
                                    lcl_9 = _slot_3
                                    lcl_8 = PyCall(lcl_8, lcl_9)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_7 = lcl_8
                                lcl_10 = lcl_7
                            lcl_5 = lcl_10
                        elif (lcl_6 == 11):
                            lcl_10 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                            _slot_3_check = lcl_10
                            lcl_10 = _slot_3_check[0]
                            lcl_10 = (lcl_10 is False)
                            if lcl_10:
                                lcl_10 = _slot_3_check
                            else:
                                lcl_7 = _slot_3_check[1]
                                lcl_7 = lcl_7
                                _slot_3 = lcl_7
                                lcl_7 = 20
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_7):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_7 = _py_local_tk
                                _slot_4 = lcl_7
                                lcl_7 = (_slot_4 is None)
                                if lcl_7:
                                    lcl_8 = prim__tokens.offset
                                    lcl_8 = (lcl_8, 'quote ) not match')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_7 = lcl_8
                                else:
                                    lcl_8 = _slot_0
                                    lcl_9 = _slot_3
                                    lcl_8 = PyCall(lcl_8, lcl_9)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_7 = lcl_8
                                lcl_10 = lcl_7
                            lcl_5 = lcl_10
                        elif (lcl_6 == 6):
                            lcl_10 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                            _slot_3_check = lcl_10
                            lcl_10 = _slot_3_check[0]
                            lcl_10 = (lcl_10 is False)
                            if lcl_10:
                                lcl_10 = _slot_3_check
                            else:
                                lcl_7 = _slot_3_check[1]
                                lcl_7 = lcl_7
                                _slot_3 = lcl_7
                                lcl_7 = 20
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_7):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_7 = _py_local_tk
                                _slot_4 = lcl_7
                                lcl_7 = (_slot_4 is None)
                                if lcl_7:
                                    lcl_8 = prim__tokens.offset
                                    lcl_8 = (lcl_8, 'quote ) not match')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_7 = lcl_8
                                else:
                                    lcl_8 = _slot_0
                                    lcl_9 = _slot_3
                                    lcl_8 = PyCall(lcl_8, lcl_9)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_7 = lcl_8
                                lcl_10 = lcl_7
                            lcl_5 = lcl_10
                        elif (lcl_6 == 16):
                            lcl_10 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                            _slot_3_check = lcl_10
                            lcl_10 = _slot_3_check[0]
                            lcl_10 = (lcl_10 is False)
                            if lcl_10:
                                lcl_10 = _slot_3_check
                            else:
                                lcl_7 = _slot_3_check[1]
                                lcl_7 = lcl_7
                                _slot_3 = lcl_7
                                lcl_7 = 20
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_7):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_7 = _py_local_tk
                                _slot_4 = lcl_7
                                lcl_7 = (_slot_4 is None)
                                if lcl_7:
                                    lcl_8 = prim__tokens.offset
                                    lcl_8 = (lcl_8, 'quote ) not match')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_7 = lcl_8
                                else:
                                    lcl_8 = _slot_0
                                    lcl_9 = _slot_3
                                    lcl_8 = PyCall(lcl_8, lcl_9)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_7 = lcl_8
                                lcl_10 = lcl_7
                            lcl_5 = lcl_10
                        elif (lcl_6 == 18):
                            lcl_10 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                            _slot_3_check = lcl_10
                            lcl_10 = _slot_3_check[0]
                            lcl_10 = (lcl_10 is False)
                            if lcl_10:
                                lcl_10 = _slot_3_check
                            else:
                                lcl_7 = _slot_3_check[1]
                                lcl_7 = lcl_7
                                _slot_3 = lcl_7
                                lcl_7 = 20
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_7):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_7 = _py_local_tk
                                _slot_4 = lcl_7
                                lcl_7 = (_slot_4 is None)
                                if lcl_7:
                                    lcl_8 = prim__tokens.offset
                                    lcl_8 = (lcl_8, 'quote ) not match')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_7 = lcl_8
                                else:
                                    lcl_8 = _slot_0
                                    lcl_9 = _slot_3
                                    lcl_8 = PyCall(lcl_8, lcl_9)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_7 = lcl_8
                                lcl_10 = lcl_7
                            lcl_5 = lcl_10
                        elif (lcl_6 == 30):
                            lcl_10 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                            _slot_3_check = lcl_10
                            lcl_10 = _slot_3_check[0]
                            lcl_10 = (lcl_10 is False)
                            if lcl_10:
                                lcl_10 = _slot_3_check
                            else:
                                lcl_7 = _slot_3_check[1]
                                lcl_7 = lcl_7
                                _slot_3 = lcl_7
                                lcl_7 = 20
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_7):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_7 = _py_local_tk
                                _slot_4 = lcl_7
                                lcl_7 = (_slot_4 is None)
                                if lcl_7:
                                    lcl_8 = prim__tokens.offset
                                    lcl_8 = (lcl_8, 'quote ) not match')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_7 = lcl_8
                                else:
                                    lcl_8 = _slot_0
                                    lcl_9 = _slot_3
                                    lcl_8 = PyCall(lcl_8, lcl_9)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_7 = lcl_8
                                lcl_10 = lcl_7
                            lcl_5 = lcl_10
                        elif (lcl_6 == 32):
                            lcl_10 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                            _slot_3_check = lcl_10
                            lcl_10 = _slot_3_check[0]
                            lcl_10 = (lcl_10 is False)
                            if lcl_10:
                                lcl_10 = _slot_3_check
                            else:
                                lcl_7 = _slot_3_check[1]
                                lcl_7 = lcl_7
                                _slot_3 = lcl_7
                                lcl_7 = 20
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_7):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_7 = _py_local_tk
                                _slot_4 = lcl_7
                                lcl_7 = (_slot_4 is None)
                                if lcl_7:
                                    lcl_8 = prim__tokens.offset
                                    lcl_8 = (lcl_8, 'quote ) not match')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_7 = lcl_8
                                else:
                                    lcl_8 = _slot_0
                                    lcl_9 = _slot_3
                                    lcl_8 = PyCall(lcl_8, lcl_9)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_7 = lcl_8
                                lcl_10 = lcl_7
                            lcl_5 = lcl_10
                        elif (lcl_6 == 33):
                            lcl_10 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                            _slot_3_check = lcl_10
                            lcl_10 = _slot_3_check[0]
                            lcl_10 = (lcl_10 is False)
                            if lcl_10:
                                lcl_10 = _slot_3_check
                            else:
                                lcl_7 = _slot_3_check[1]
                                lcl_7 = lcl_7
                                _slot_3 = lcl_7
                                lcl_7 = 20
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_7):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_7 = _py_local_tk
                                _slot_4 = lcl_7
                                lcl_7 = (_slot_4 is None)
                                if lcl_7:
                                    lcl_8 = prim__tokens.offset
                                    lcl_8 = (lcl_8, 'quote ) not match')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_7 = lcl_8
                                else:
                                    lcl_8 = _slot_0
                                    lcl_9 = _slot_3
                                    lcl_8 = PyCall(lcl_8, lcl_9)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_7 = lcl_8
                                lcl_10 = lcl_7
                            lcl_5 = lcl_10
                        elif (lcl_6 == 20):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_10 = _py_local_t
                            _slot_3 = lcl_10
                            lcl_10 = _slot_0
                            lcl_7 = []
                            lcl_10 = PyCall(lcl_10, lcl_7)
                            _slot_local__1 = lcl_10
                            lcl_10 = (True, _slot_local__1)
                            lcl_5 = lcl_10
                        elif (lcl_6 == 19):
                            lcl_10 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                            _slot_3_check = lcl_10
                            lcl_10 = _slot_3_check[0]
                            lcl_10 = (lcl_10 is False)
                            if lcl_10:
                                lcl_10 = _slot_3_check
                            else:
                                lcl_7 = _slot_3_check[1]
                                lcl_7 = lcl_7
                                _slot_3 = lcl_7
                                lcl_7 = 20
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_7):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_7 = _py_local_tk
                                _slot_4 = lcl_7
                                lcl_7 = (_slot_4 is None)
                                if lcl_7:
                                    lcl_8 = prim__tokens.offset
                                    lcl_8 = (lcl_8, 'quote ) not match')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_7 = lcl_8
                                else:
                                    lcl_8 = _slot_0
                                    lcl_9 = _slot_3
                                    lcl_8 = PyCall(lcl_8, lcl_9)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_7 = lcl_8
                                lcl_10 = lcl_7
                            lcl_5 = lcl_10
                        elif (lcl_6 == 8):
                            lcl_10 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                            _slot_3_check = lcl_10
                            lcl_10 = _slot_3_check[0]
                            lcl_10 = (lcl_10 is False)
                            if lcl_10:
                                lcl_10 = _slot_3_check
                            else:
                                lcl_7 = _slot_3_check[1]
                                lcl_7 = lcl_7
                                _slot_3 = lcl_7
                                lcl_7 = 20
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_7):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_7 = _py_local_tk
                                _slot_4 = lcl_7
                                lcl_7 = (_slot_4 is None)
                                if lcl_7:
                                    lcl_8 = prim__tokens.offset
                                    lcl_8 = (lcl_8, 'quote ) not match')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_7 = lcl_8
                                else:
                                    lcl_8 = _slot_0
                                    lcl_9 = _slot_3
                                    lcl_8 = PyCall(lcl_8, lcl_9)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_7 = lcl_8
                                lcl_10 = lcl_7
                            lcl_5 = lcl_10
                        elif (lcl_6 == 40):
                            lcl_10 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                            _slot_3_check = lcl_10
                            lcl_10 = _slot_3_check[0]
                            lcl_10 = (lcl_10 is False)
                            if lcl_10:
                                lcl_10 = _slot_3_check
                            else:
                                lcl_7 = _slot_3_check[1]
                                lcl_7 = lcl_7
                                _slot_3 = lcl_7
                                lcl_7 = 20
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_7):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_7 = _py_local_tk
                                _slot_4 = lcl_7
                                lcl_7 = (_slot_4 is None)
                                if lcl_7:
                                    lcl_8 = prim__tokens.offset
                                    lcl_8 = (lcl_8, 'quote ) not match')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_7 = lcl_8
                                else:
                                    lcl_8 = _slot_0
                                    lcl_9 = _slot_3
                                    lcl_8 = PyCall(lcl_8, lcl_9)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_7 = lcl_8
                                lcl_10 = lcl_7
                            lcl_5 = lcl_10
                        elif (lcl_6 == 42):
                            lcl_10 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                            _slot_3_check = lcl_10
                            lcl_10 = _slot_3_check[0]
                            lcl_10 = (lcl_10 is False)
                            if lcl_10:
                                lcl_10 = _slot_3_check
                            else:
                                lcl_7 = _slot_3_check[1]
                                lcl_7 = lcl_7
                                _slot_3 = lcl_7
                                lcl_7 = 20
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_7):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_7 = _py_local_tk
                                _slot_4 = lcl_7
                                lcl_7 = (_slot_4 is None)
                                if lcl_7:
                                    lcl_8 = prim__tokens.offset
                                    lcl_8 = (lcl_8, 'quote ) not match')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_7 = lcl_8
                                else:
                                    lcl_8 = _slot_0
                                    lcl_9 = _slot_3
                                    lcl_8 = PyCall(lcl_8, lcl_9)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_7 = lcl_8
                                lcl_10 = lcl_7
                            lcl_5 = lcl_10
                        elif (lcl_6 == 41):
                            lcl_10 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                            _slot_3_check = lcl_10
                            lcl_10 = _slot_3_check[0]
                            lcl_10 = (lcl_10 is False)
                            if lcl_10:
                                lcl_10 = _slot_3_check
                            else:
                                lcl_7 = _slot_3_check[1]
                                lcl_7 = lcl_7
                                _slot_3 = lcl_7
                                lcl_7 = 20
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_7):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_7 = _py_local_tk
                                _slot_4 = lcl_7
                                lcl_7 = (_slot_4 is None)
                                if lcl_7:
                                    lcl_8 = prim__tokens.offset
                                    lcl_8 = (lcl_8, 'quote ) not match')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_7 = lcl_8
                                else:
                                    lcl_8 = _slot_0
                                    lcl_9 = _slot_3
                                    lcl_8 = PyCall(lcl_8, lcl_9)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_7 = lcl_8
                                lcl_10 = lcl_7
                            lcl_5 = lcl_10
                        elif (lcl_6 == 39):
                            lcl_10 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                            _slot_3_check = lcl_10
                            lcl_10 = _slot_3_check[0]
                            lcl_10 = (lcl_10 is False)
                            if lcl_10:
                                lcl_10 = _slot_3_check
                            else:
                                lcl_7 = _slot_3_check[1]
                                lcl_7 = lcl_7
                                _slot_3 = lcl_7
                                lcl_7 = 20
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_7):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_7 = _py_local_tk
                                _slot_4 = lcl_7
                                lcl_7 = (_slot_4 is None)
                                if lcl_7:
                                    lcl_8 = prim__tokens.offset
                                    lcl_8 = (lcl_8, 'quote ) not match')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_7 = lcl_8
                                else:
                                    lcl_8 = _slot_0
                                    lcl_9 = _slot_3
                                    lcl_8 = PyCall(lcl_8, lcl_9)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_7 = lcl_8
                                lcl_10 = lcl_7
                            lcl_5 = lcl_10
                        elif (lcl_6 == 38):
                            lcl_10 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                            _slot_3_check = lcl_10
                            lcl_10 = _slot_3_check[0]
                            lcl_10 = (lcl_10 is False)
                            if lcl_10:
                                lcl_10 = _slot_3_check
                            else:
                                lcl_7 = _slot_3_check[1]
                                lcl_7 = lcl_7
                                _slot_3 = lcl_7
                                lcl_7 = 20
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_7):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_7 = _py_local_tk
                                _slot_4 = lcl_7
                                lcl_7 = (_slot_4 is None)
                                if lcl_7:
                                    lcl_8 = prim__tokens.offset
                                    lcl_8 = (lcl_8, 'quote ) not match')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_7 = lcl_8
                                else:
                                    lcl_8 = _slot_0
                                    lcl_9 = _slot_3
                                    lcl_8 = PyCall(lcl_8, lcl_9)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_7 = lcl_8
                                lcl_10 = lcl_7
                            lcl_5 = lcl_10
                        else:
                            lcl_10 = (_off_2, 'atomExpr lookahead failed')
                            lcl_10 = prim__cons(lcl_10, prim__nil)
                            lcl_10 = lcl_10
                            lcl_10 = (False, lcl_10)
                            lcl_5 = lcl_10
                        lcl_4 = lcl_5
                    else:
                        lcl_10 = (_off_2, 'atomExpr got EOF')
                        lcl_10 = prim__cons(lcl_10, prim__nil)
                        lcl_10 = lcl_10
                        lcl_10 = (False, lcl_10)
                        lcl_4 = lcl_10
                    lcl_2 = lcl_4
                elif (lcl_3 == 40):
                    lcl_10 = parse_ID(prim__state, prim__tokens)
                    _slot_2_check = lcl_10
                    lcl_10 = _slot_2_check[0]
                    lcl_10 = (lcl_10 is False)
                    if lcl_10:
                        lcl_10 = _slot_2_check
                    else:
                        lcl_4 = _slot_2_check[1]
                        lcl_4 = lcl_4
                        _slot_2 = lcl_4
                        lcl_4 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                        lcl_5 = _slot_0
                        lcl_6 = _slot_2
                        lcl_4 = Field(lcl_4, lcl_5, lcl_6)
                        _slot_local__1 = lcl_4
                        lcl_4 = (True, _slot_local__1)
                        lcl_10 = lcl_4
                    lcl_2 = lcl_10
                elif (lcl_3 == 45):
                    lcl_10 = parse_bop(prim__state, prim__tokens)
                    _slot_2_check = lcl_10
                    lcl_10 = _slot_2_check[0]
                    lcl_10 = (lcl_10 is False)
                    if lcl_10:
                        lcl_10 = _slot_2_check
                    else:
                        lcl_4 = _slot_2_check[1]
                        lcl_4 = lcl_4
                        _slot_2 = lcl_4
                        lcl_4 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                        lcl_5 = _slot_0
                        lcl_6 = _slot_2
                        lcl_6 = lcl_6.value
                        lcl_4 = Field(lcl_4, lcl_5, lcl_6)
                        _slot_local__1 = lcl_4
                        lcl_4 = (True, _slot_local__1)
                        lcl_10 = lcl_4
                    lcl_2 = lcl_10
                elif (lcl_3 == 44):
                    lcl_10 = parse_bop(prim__state, prim__tokens)
                    _slot_2_check = lcl_10
                    lcl_10 = _slot_2_check[0]
                    lcl_10 = (lcl_10 is False)
                    if lcl_10:
                        lcl_10 = _slot_2_check
                    else:
                        lcl_4 = _slot_2_check[1]
                        lcl_4 = lcl_4
                        _slot_2 = lcl_4
                        lcl_4 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                        lcl_5 = _slot_0
                        lcl_6 = _slot_2
                        lcl_6 = lcl_6.value
                        lcl_4 = Field(lcl_4, lcl_5, lcl_6)
                        _slot_local__1 = lcl_4
                        lcl_4 = (True, _slot_local__1)
                        lcl_10 = lcl_4
                    lcl_2 = lcl_10
                elif (lcl_3 == 41):
                    lcl_10 = parse_ID(prim__state, prim__tokens)
                    _slot_2_check = lcl_10
                    lcl_10 = _slot_2_check[0]
                    lcl_10 = (lcl_10 is False)
                    if lcl_10:
                        lcl_10 = _slot_2_check
                    else:
                        lcl_4 = _slot_2_check[1]
                        lcl_4 = lcl_4
                        _slot_2 = lcl_4
                        lcl_4 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                        lcl_5 = _slot_0
                        lcl_6 = _slot_2
                        lcl_4 = Field(lcl_4, lcl_5, lcl_6)
                        _slot_local__1 = lcl_4
                        lcl_4 = (True, _slot_local__1)
                        lcl_10 = lcl_4
                    lcl_2 = lcl_10
                else:
                    lcl_10 = (_off_1, 'atomExpr lookahead failed')
                    lcl_10 = prim__cons(lcl_10, prim__nil)
                    lcl_10 = lcl_10
                    lcl_10 = (False, lcl_10)
                    lcl_2 = lcl_10
                lcl_1 = lcl_2
            else:
                lcl_10 = (_off_1, 'atomExpr got EOF')
                lcl_10 = prim__cons(lcl_10, prim__nil)
                lcl_10 = lcl_10
                lcl_10 = (False, lcl_10)
                lcl_1 = lcl_10
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_atomExpr(_slot_0, prim__state, prim__tokens):
        lr_atomExpr_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_atomExpr(lr_atomExpr_reduce, prim__state, prim__tokens)
        lr_atomExpr_try = lcl_0
        lcl_0 = lr_atomExpr_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_atomExpr_try[1]
            lcl_1 = lcl_1
            lr_atomExpr_reduce = lcl_1
            lcl_1 = lr_step_atomExpr(lr_atomExpr_reduce, prim__state, prim__tokens)
            lr_atomExpr_try = lcl_1
            lcl_1 = lr_atomExpr_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_atomExpr_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_atomExpr_try
        return lcl_0

    def lr_step_booland(_slot_0, prim__state, prim__tokens):
        lcl_0 = 23
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote and not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_bin(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                lcl_3 = _slot_0
                lcl_4 = _slot_2
                lcl_2 = And(lcl_2, lcl_3, lcl_4)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_booland(_slot_0, prim__state, prim__tokens):
        lr_booland_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_booland(lr_booland_reduce, prim__state, prim__tokens)
        lr_booland_try = lcl_0
        lcl_0 = lr_booland_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_booland_try[1]
            lcl_1 = lcl_1
            lr_booland_reduce = lcl_1
            lcl_1 = lr_step_booland(lr_booland_reduce, prim__state, prim__tokens)
            lr_booland_try = lcl_1
            lcl_1 = lr_booland_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_booland_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_booland_try
        return lcl_0

    def lr_step_boolor(_slot_0, prim__state, prim__tokens):
        lcl_0 = 22
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote or not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_booland(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                lcl_3 = _slot_0
                lcl_4 = _slot_2
                lcl_2 = Or(lcl_2, lcl_3, lcl_4)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_boolor(_slot_0, prim__state, prim__tokens):
        lr_boolor_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_boolor(lr_boolor_reduce, prim__state, prim__tokens)
        lr_boolor_try = lcl_0
        lcl_0 = lr_boolor_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_boolor_try[1]
            lcl_1 = lcl_1
            lr_boolor_reduce = lcl_1
            lcl_1 = lr_step_boolor(lr_boolor_reduce, prim__state, prim__tokens)
            lr_boolor_try = lcl_1
            lcl_1 = lr_boolor_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_boolor_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_boolor_try
        return lcl_0

    def lr_step_call__expr(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_atomExpr(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = lcl_1
            _slot_1 = lcl_1
            lcl_1 = _slot_0
            lcl_2 = _slot_1
            lcl_1 = Call(lcl_1, lcl_2)
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_call__expr(_slot_0, prim__state, prim__tokens):
        lr_call__expr_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_call__expr(lr_call__expr_reduce, prim__state, prim__tokens)
        lr_call__expr_try = lcl_0
        lcl_0 = lr_call__expr_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_call__expr_try[1]
            lcl_1 = lcl_1
            lr_call__expr_reduce = lcl_1
            lcl_1 = lr_step_call__expr(lr_call__expr_reduce, prim__state, prim__tokens)
            lr_call__expr_try = lcl_1
            lcl_1 = lr_call__expr_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_call__expr_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_call__expr_try
        return lcl_0

    def lr_step_expr(_slot_0, prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 4):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_1 = lcl_3
                lcl_3 = parse_match__cases(prim__state, prim__tokens)
                _slot_2_check = lcl_3
                lcl_3 = _slot_2_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_2_check
                else:
                    lcl_4 = _slot_2_check[1]
                    lcl_4 = lcl_4
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                    lcl_5 = _slot_0
                    lcl_6 = _slot_2
                    lcl_4 = Match(lcl_4, lcl_5, lcl_6)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 2):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_1 = lcl_3
                lcl_3 = parse_expr(prim__state, prim__tokens)
                _slot_2_check = lcl_3
                lcl_3 = _slot_2_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_2_check
                else:
                    lcl_4 = _slot_2_check[1]
                    lcl_4 = lcl_4
                    _slot_2 = lcl_4
                    lcl_4 = 3
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_3 = lcl_4
                    lcl_4 = (_slot_3 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote else not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = parse_expr(prim__state, prim__tokens)
                        _slot_4_check = lcl_5
                        lcl_5 = _slot_4_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_4_check
                        else:
                            lcl_6 = _slot_4_check[1]
                            lcl_6 = lcl_6
                            _slot_4 = lcl_6
                            lcl_6 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                            lcl_7 = _slot_0
                            lcl_8 = _slot_2
                            lcl_9 = _slot_4
                            lcl_6 = If(lcl_6, lcl_7, lcl_8, lcl_9)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'expr lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'expr got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_expr(_slot_0, prim__state, prim__tokens):
        lr_expr_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_expr(lr_expr_reduce, prim__state, prim__tokens)
        lr_expr_try = lcl_0
        lcl_0 = lr_expr_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_expr_try[1]
            lcl_1 = lcl_1
            lr_expr_reduce = lcl_1
            lcl_1 = lr_step_expr(lr_expr_reduce, prim__state, prim__tokens)
            lr_expr_try = lcl_1
            lcl_1 = lr_expr_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_expr_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_expr_try
        return lcl_0

    def lr_step_interactive__expr(_slot_0, prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 4):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_1 = lcl_3
                lcl_3 = parse_match__cases(prim__state, prim__tokens)
                _slot_2_check = lcl_3
                lcl_3 = _slot_2_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_2_check
                else:
                    lcl_4 = _slot_2_check[1]
                    lcl_4 = lcl_4
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                    lcl_5 = _slot_0
                    lcl_6 = _slot_2
                    lcl_4 = Match(lcl_4, lcl_5, lcl_6)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 2):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_1 = lcl_3
                lcl_3 = parse_expr(prim__state, prim__tokens)
                _slot_2_check = lcl_3
                lcl_3 = _slot_2_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_2_check
                else:
                    lcl_4 = _slot_2_check[1]
                    lcl_4 = lcl_4
                    _slot_2 = lcl_4
                    lcl_4 = 3
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_3 = lcl_4
                    lcl_4 = (_slot_3 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote else not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = parse_expr(prim__state, prim__tokens)
                        _slot_4_check = lcl_5
                        lcl_5 = _slot_4_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_4_check
                        else:
                            lcl_6 = _slot_4_check[1]
                            lcl_6 = lcl_6
                            _slot_4 = lcl_6
                            lcl_6 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                            lcl_7 = _slot_0
                            lcl_8 = _slot_2
                            lcl_9 = _slot_4
                            lcl_6 = If(lcl_6, lcl_7, lcl_8, lcl_9)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'interactive_expr lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'interactive_expr got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_interactive__expr(_slot_0, prim__state, prim__tokens):
        lr_interactive__expr_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_interactive__expr(lr_interactive__expr_reduce, prim__state, prim__tokens)
        lr_interactive__expr_try = lcl_0
        lcl_0 = lr_interactive__expr_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_interactive__expr_try[1]
            lcl_1 = lcl_1
            lr_interactive__expr_reduce = lcl_1
            lcl_1 = lr_step_interactive__expr(lr_interactive__expr_reduce, prim__state, prim__tokens)
            lr_interactive__expr_try = lcl_1
            lcl_1 = lr_interactive__expr_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_interactive__expr_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_interactive__expr_try
        return lcl_0

    def lr_step_rbnf__list__5(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_btr(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = lcl_1
            _slot_1 = lcl_1
            lcl_1 = _slot_0
            lcl_2 = _slot_1
            _py_local_t = lcl_1
            _py_local_t.append(lcl_2)
            lcl_1 = _py_local_t
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__list__5(_slot_0, prim__state, prim__tokens):
        lr_rbnf__list__5_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__list__5(lr_rbnf__list__5_reduce, prim__state, prim__tokens)
        lr_rbnf__list__5_try = lcl_0
        lcl_0 = lr_rbnf__list__5_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__list__5_try[1]
            lcl_1 = lcl_1
            lr_rbnf__list__5_reduce = lcl_1
            lcl_1 = lr_step_rbnf__list__5(lr_rbnf__list__5_reduce, prim__state, prim__tokens)
            lr_rbnf__list__5_try = lcl_1
            lcl_1 = lr_rbnf__list__5_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__list__5_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__list__5_try
        return lcl_0

    def lr_step_rbnf__sep__list__0(_slot_0, prim__state, prim__tokens):
        lcl_0 = 9
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote , not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_bind(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__0(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__0_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__0(lr_rbnf__sep__list__0_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__0_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__0_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__0_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__0_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__0(lr_rbnf__sep__list__0_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__0_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__0_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__0_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__0_try
        return lcl_0

    def lr_step_rbnf__sep__list__1(_slot_0, prim__state, prim__tokens):
        lcl_0 = 9
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote , not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_cons(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__1(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__1_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__1(lr_rbnf__sep__list__1_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__1_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__1_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__1_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__1_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__1(lr_rbnf__sep__list__1_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__1_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__1_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__1_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__1_try
        return lcl_0

    def lr_step_rbnf__sep__list__2(_slot_0, prim__state, prim__tokens):
        lcl_0 = 17
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote . not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_ID(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__2(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__2_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__2(lr_rbnf__sep__list__2_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__2_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__2_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__2_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__2_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__2(lr_rbnf__sep__list__2_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__2_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__2_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__2_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__2_try
        return lcl_0

    def lr_step_rbnf__sep__list__3(_slot_0, prim__state, prim__tokens):
        lcl_0 = 9
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote , not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_slot(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__3(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__3_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__3(lr_rbnf__sep__list__3_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__3_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__3_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__3_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__3_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__3(lr_rbnf__sep__list__3_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__3_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__3_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__3_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__3_try
        return lcl_0

    def lr_step_rbnf__sep__list__4(_slot_0, prim__state, prim__tokens):
        lcl_0 = 9
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote , not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_match__case(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__4(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__4_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__4(lr_rbnf__sep__list__4_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__4_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__4_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__4_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__4_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__4(lr_rbnf__sep__list__4_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__4_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__4_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__4_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__4_try
        return lcl_0

    def lr_step_rbnf__sep__list__6(_slot_0, prim__state, prim__tokens):
        lcl_0 = 9
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote , not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_expr(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__6(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__6_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__6(lr_rbnf__sep__list__6_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__6_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__6_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__6_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__6_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__6(lr_rbnf__sep__list__6_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__6_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__6_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__6_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__6_try
        return lcl_0

    def parse_ID(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 40):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 41):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'ID lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'ID got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_LET(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 5):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 6):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'LET lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'LET got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_START(prim__state, prim__tokens):
        lcl_0 = 0
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'BOF not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_interactive(prim__state, prim__tokens)
            _slot_1_check = lcl_1
            lcl_1 = _slot_1_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_1_check
            else:
                lcl_2 = _slot_1_check[1]
                lcl_2 = lcl_2
                _slot_1 = lcl_2
                lcl_2 = 1
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_2 = lcl_2
                lcl_2 = (_slot_2 is None)
                if lcl_2:
                    lcl_3 = prim__tokens.offset
                    lcl_3 = (lcl_3, 'EOF not match')
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = lcl_3
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                else:
                    lcl_3 = _slot_1
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_atom(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 35):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_expr(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = 36
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_2 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote } not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = Var(lcl_6, WILDCARD)
                        lcl_7 = _slot_1
                        lcl_7 = TCO(lcl_7)
                        lcl_5 = Fun(lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 34):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = 42
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_3):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_3 = _py_local_tk
                _slot_1 = lcl_3
                lcl_3 = (_slot_1 is None)
                if lcl_3:
                    lcl_4 = prim__tokens.offset
                    lcl_4 = (lcl_4, 'STRING not match')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                    lcl_5 = _slot_1
                    lcl_5 = lcl_5.value
                    lcl_5 = DQString(lcl_5)
                    lcl_4 = Extern(lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 18):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                lcl_4 = _slot_0
                lcl_4 = lcl_4.value
                lcl_3 = Var(lcl_3, lcl_4)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 30):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_3:
                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_5 = lcl_5.idint
                    if (lcl_5 == 35):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = List(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 10):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = List(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 12):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = List(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 5):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = List(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 15):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = List(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 14):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = List(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 13):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = List(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 34):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = List(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 11):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = List(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 6):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = List(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 16):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = List(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 18):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = List(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 31):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_6 = _py_local_t
                        _slot_1 = lcl_6
                        lcl_6 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_7 = []
                        lcl_6 = List(lcl_6, lcl_7)
                        _slot_local__1 = lcl_6
                        lcl_6 = (True, _slot_local__1)
                        lcl_4 = lcl_6
                    elif (lcl_5 == 30):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = List(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 32):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = List(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 33):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = List(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 19):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = List(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 8):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = List(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 40):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = List(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 42):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = List(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 41):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = List(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 39):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = List(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 38):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = List(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    else:
                        lcl_6 = (_off_1, 'atom lookahead failed')
                        lcl_6 = prim__cons(lcl_6, prim__nil)
                        lcl_6 = lcl_6
                        lcl_6 = (False, lcl_6)
                        lcl_4 = lcl_6
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, 'atom got EOF')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 32):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                lcl_3 = Lit(lcl_3, True)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 33):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                lcl_3 = Lit(lcl_3, False)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 19):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_3:
                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_5 = lcl_5.idint
                    if (lcl_5 == 35):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = Tuple(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 10):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = Tuple(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 12):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = Tuple(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 5):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = Tuple(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 15):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = Tuple(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 14):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = Tuple(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 13):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = Tuple(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 34):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = Tuple(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 11):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = Tuple(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 6):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = Tuple(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 16):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = Tuple(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 29):
                        lcl_6 = parse_bop(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_9 = lcl_9.value
                                lcl_8 = Var(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 18):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = Tuple(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 26):
                        lcl_6 = parse_bop(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_9 = lcl_9.value
                                lcl_8 = Var(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 30):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = Tuple(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 32):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = Tuple(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 33):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = Tuple(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 28):
                        lcl_6 = parse_bop(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_9 = lcl_9.value
                                lcl_8 = Var(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 27):
                        lcl_6 = parse_bop(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_9 = lcl_9.value
                                lcl_8 = Var(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 20):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_6 = _py_local_t
                        _slot_1 = lcl_6
                        lcl_6 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_7 = []
                        lcl_6 = Tuple(lcl_6, lcl_7)
                        _slot_local__1 = lcl_6
                        lcl_6 = (True, _slot_local__1)
                        lcl_4 = lcl_6
                    elif (lcl_5 == 19):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = Tuple(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 8):
                        lcl_6 = prim__tokens.offset
                        _off_2 = lcl_6
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = Tuple(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 40):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = Tuple(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 42):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = Tuple(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 45):
                        lcl_6 = parse_bop(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_9 = lcl_9.value
                                lcl_8 = Var(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 44):
                        lcl_6 = parse_bop(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_9 = lcl_9.value
                                lcl_8 = Var(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 41):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = Tuple(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 39):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = Tuple(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 38):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 20
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_8 = Tuple(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    else:
                        lcl_6 = (_off_1, 'atom lookahead failed')
                        lcl_6 = prim__cons(lcl_6, prim__nil)
                        lcl_6 = lcl_6
                        lcl_6 = (False, lcl_6)
                        lcl_4 = lcl_6
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, 'atom got EOF')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 8):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                    lcl_4 = Var(lcl_4, DEREF)
                    lcl_5 = _slot_1
                    lcl_4 = Call(lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 40):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                lcl_4 = _slot_0
                lcl_4 = lcl_4.value
                lcl_3 = Var(lcl_3, lcl_4)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 42):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                lcl_4 = _slot_0
                lcl_4 = lcl_4.value
                lcl_4 = DQString(lcl_4)
                lcl_3 = Lit(lcl_3, lcl_4)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 41):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                lcl_4 = _slot_0
                lcl_4 = lcl_4.value
                lcl_3 = Var(lcl_3, lcl_4)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 39):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                lcl_4 = _slot_0
                lcl_4 = lcl_4.value
                lcl_4 = int(lcl_4)
                lcl_3 = Lit(lcl_3, lcl_4)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 38):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                lcl_4 = _slot_0
                lcl_4 = lcl_4.value
                lcl_4 = float(lcl_4)
                lcl_3 = Lit(lcl_3, lcl_4)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'atom lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'atom got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_atomExpr(prim__state, prim__tokens):
        lcl_0 = parse_atom(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_atomExpr(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_bin(prim__state, prim__tokens):
        lcl_0 = parse_call__expr(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_1:
                lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_3 = lcl_3.idint
                if (lcl_3 == 29):
                    lcl_4 = parse_rbnf__list__5(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = _slot_0
                        lcl_6 = _slot_1
                        lcl_5 = Bin(lcl_5, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 26):
                    lcl_4 = parse_rbnf__list__5(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = _slot_0
                        lcl_6 = _slot_1
                        lcl_5 = Bin(lcl_5, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 28):
                    lcl_4 = parse_rbnf__list__5(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = _slot_0
                        lcl_6 = _slot_1
                        lcl_5 = Bin(lcl_5, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 27):
                    lcl_4 = parse_rbnf__list__5(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = _slot_0
                        lcl_6 = _slot_1
                        lcl_5 = Bin(lcl_5, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 45):
                    lcl_4 = parse_rbnf__list__5(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = _slot_0
                        lcl_6 = _slot_1
                        lcl_5 = Bin(lcl_5, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 44):
                    lcl_4 = parse_rbnf__list__5(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = _slot_0
                        lcl_6 = _slot_1
                        lcl_5 = Bin(lcl_5, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                else:
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_2 = lcl_4
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'bin got EOF')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_bind(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 29):
                lcl_3 = parse_bop(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = 7
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_1 = lcl_4
                    lcl_4 = (_slot_1 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote = not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = parse_expr(prim__state, prim__tokens)
                        _slot_2_check = lcl_5
                        lcl_5 = _slot_2_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_2_check
                        else:
                            lcl_6 = _slot_2_check[1]
                            lcl_6 = lcl_6
                            _slot_2 = lcl_6
                            lcl_6 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                            lcl_7 = _slot_0
                            lcl_7 = lcl_7.value
                            lcl_8 = _slot_2
                            lcl_6 = (lcl_6, lcl_7, lcl_8)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 26):
                lcl_3 = parse_bop(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = 7
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_1 = lcl_4
                    lcl_4 = (_slot_1 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote = not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = parse_expr(prim__state, prim__tokens)
                        _slot_2_check = lcl_5
                        lcl_5 = _slot_2_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_2_check
                        else:
                            lcl_6 = _slot_2_check[1]
                            lcl_6 = lcl_6
                            _slot_2 = lcl_6
                            lcl_6 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                            lcl_7 = _slot_0
                            lcl_7 = lcl_7.value
                            lcl_8 = _slot_2
                            lcl_6 = (lcl_6, lcl_7, lcl_8)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 28):
                lcl_3 = parse_bop(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = 7
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_1 = lcl_4
                    lcl_4 = (_slot_1 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote = not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = parse_expr(prim__state, prim__tokens)
                        _slot_2_check = lcl_5
                        lcl_5 = _slot_2_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_2_check
                        else:
                            lcl_6 = _slot_2_check[1]
                            lcl_6 = lcl_6
                            _slot_2 = lcl_6
                            lcl_6 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                            lcl_7 = _slot_0
                            lcl_7 = lcl_7.value
                            lcl_8 = _slot_2
                            lcl_6 = (lcl_6, lcl_7, lcl_8)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 27):
                lcl_3 = parse_bop(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = 7
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_1 = lcl_4
                    lcl_4 = (_slot_1 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote = not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = parse_expr(prim__state, prim__tokens)
                        _slot_2_check = lcl_5
                        lcl_5 = _slot_2_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_2_check
                        else:
                            lcl_6 = _slot_2_check[1]
                            lcl_6 = lcl_6
                            _slot_2 = lcl_6
                            lcl_6 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                            lcl_7 = _slot_0
                            lcl_7 = lcl_7.value
                            lcl_8 = _slot_2
                            lcl_6 = (lcl_6, lcl_7, lcl_8)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 8):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = 7
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_3):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_3 = _py_local_tk
                _slot_1 = lcl_3
                lcl_3 = (_slot_1 is None)
                if lcl_3:
                    lcl_4 = prim__tokens.offset
                    lcl_4 = (lcl_4, 'quote = not match')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                else:
                    lcl_4 = parse_expr(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                        lcl_6 = _slot_0
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_2
                        lcl_5 = (lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 40):
                lcl_3 = parse_ID(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = 7
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_1 = lcl_4
                    lcl_4 = (_slot_1 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote = not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = parse_expr(prim__state, prim__tokens)
                        _slot_2_check = lcl_5
                        lcl_5 = _slot_2_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_2_check
                        else:
                            lcl_6 = _slot_2_check[1]
                            lcl_6 = lcl_6
                            _slot_2 = lcl_6
                            lcl_6 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                            lcl_7 = _slot_0
                            lcl_8 = _slot_2
                            lcl_6 = (lcl_6, lcl_7, lcl_8)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 45):
                lcl_3 = parse_bop(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = 7
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_1 = lcl_4
                    lcl_4 = (_slot_1 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote = not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = parse_expr(prim__state, prim__tokens)
                        _slot_2_check = lcl_5
                        lcl_5 = _slot_2_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_2_check
                        else:
                            lcl_6 = _slot_2_check[1]
                            lcl_6 = lcl_6
                            _slot_2 = lcl_6
                            lcl_6 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                            lcl_7 = _slot_0
                            lcl_7 = lcl_7.value
                            lcl_8 = _slot_2
                            lcl_6 = (lcl_6, lcl_7, lcl_8)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 44):
                lcl_3 = parse_bop(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = 7
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_1 = lcl_4
                    lcl_4 = (_slot_1 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote = not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = parse_expr(prim__state, prim__tokens)
                        _slot_2_check = lcl_5
                        lcl_5 = _slot_2_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_2_check
                        else:
                            lcl_6 = _slot_2_check[1]
                            lcl_6 = lcl_6
                            _slot_2 = lcl_6
                            lcl_6 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                            lcl_7 = _slot_0
                            lcl_7 = lcl_7.value
                            lcl_8 = _slot_2
                            lcl_6 = (lcl_6, lcl_7, lcl_8)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 41):
                lcl_3 = parse_ID(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = 7
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_1 = lcl_4
                    lcl_4 = (_slot_1 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote = not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = parse_expr(prim__state, prim__tokens)
                        _slot_2_check = lcl_5
                        lcl_5 = _slot_2_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_2_check
                        else:
                            lcl_6 = _slot_2_check[1]
                            lcl_6 = lcl_6
                            _slot_2 = lcl_6
                            lcl_6 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                            lcl_7 = _slot_0
                            lcl_8 = _slot_2
                            lcl_6 = (lcl_6, lcl_7, lcl_8)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'bind lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'bind got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_bind__expr(prim__state, prim__tokens):
        lcl_0 = parse_stmt(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = parse_expr__cont(prim__state, prim__tokens)
            _slot_1_check = lcl_1
            lcl_1 = _slot_1_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_1_check
            else:
                lcl_2 = _slot_1_check[1]
                lcl_2 = lcl_2
                _slot_1 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_1
                lcl_2 = In(lcl_2, lcl_3)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_binds(prim__state, prim__tokens):
        lcl_0 = parse_rbnf__sep__list__0(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_booland(prim__state, prim__tokens):
        lcl_0 = parse_bin(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_booland(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_boolor(prim__state, prim__tokens):
        lcl_0 = parse_booland(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_boolor(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_bop(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 29):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_3:
                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_5 = lcl_5.idint
                    if (lcl_5 == 40):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_6 = _py_local_t
                        _slot_1 = lcl_6
                        lcl_6 = 29
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_6):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_6 = _py_local_tk
                        _slot_2 = lcl_6
                        lcl_6 = (_slot_2 is None)
                        if lcl_6:
                            lcl_7 = prim__tokens.offset
                            lcl_7 = (lcl_7, 'quote ` not match')
                            lcl_7 = prim__cons(lcl_7, prim__nil)
                            lcl_7 = lcl_7
                            lcl_7 = (False, lcl_7)
                            lcl_6 = lcl_7
                        else:
                            lcl_7 = _slot_1
                            _slot_local__1 = lcl_7
                            lcl_7 = (True, _slot_local__1)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 41):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_6 = _py_local_t
                        _slot_1 = lcl_6
                        lcl_6 = 29
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_6):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_6 = _py_local_tk
                        _slot_2 = lcl_6
                        lcl_6 = (_slot_2 is None)
                        if lcl_6:
                            lcl_7 = prim__tokens.offset
                            lcl_7 = (lcl_7, 'quote ` not match')
                            lcl_7 = prim__cons(lcl_7, prim__nil)
                            lcl_7 = lcl_7
                            lcl_7 = (False, lcl_7)
                            lcl_6 = lcl_7
                        else:
                            lcl_7 = _slot_1
                            _slot_local__1 = lcl_7
                            lcl_7 = (True, _slot_local__1)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    else:
                        lcl_6 = (_off_1, 'bop lookahead failed')
                        lcl_6 = prim__cons(lcl_6, prim__nil)
                        lcl_6 = lcl_6
                        lcl_6 = (False, lcl_6)
                        lcl_4 = lcl_6
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, 'bop got EOF')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 26):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 28):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 27):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 45):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 44):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'bop lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'bop got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_btr(prim__state, prim__tokens):
        lcl_0 = parse_bop(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_1:
                lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_3 = lcl_3.idint
                if (lcl_3 == 35):
                    lcl_4 = parse_call__expr(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_0
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_1
                        lcl_5 = (lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 10):
                    lcl_4 = parse_bind__expr(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_0
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_1
                        lcl_5 = (lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 12):
                    lcl_4 = parse_bind__expr(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_0
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_1
                        lcl_5 = (lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 5):
                    lcl_4 = parse_bind__expr(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_0
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_1
                        lcl_5 = (lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 15):
                    lcl_4 = parse_bind__expr(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_0
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_1
                        lcl_5 = (lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 14):
                    lcl_4 = parse_bind__expr(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_0
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_1
                        lcl_5 = (lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 13):
                    lcl_4 = parse_bind__expr(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_0
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_1
                        lcl_5 = (lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 34):
                    lcl_4 = parse_call__expr(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_0
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_1
                        lcl_5 = (lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 11):
                    lcl_4 = parse_bind__expr(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_0
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_1
                        lcl_5 = (lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 6):
                    lcl_4 = parse_bind__expr(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_0
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_1
                        lcl_5 = (lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 16):
                    lcl_4 = parse_bind__expr(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_0
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_1
                        lcl_5 = (lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 18):
                    lcl_4 = parse_call__expr(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_0
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_1
                        lcl_5 = (lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 30):
                    lcl_4 = parse_call__expr(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_0
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_1
                        lcl_5 = (lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 32):
                    lcl_4 = parse_call__expr(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_0
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_1
                        lcl_5 = (lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 33):
                    lcl_4 = parse_call__expr(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_0
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_1
                        lcl_5 = (lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 19):
                    lcl_4 = parse_call__expr(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_0
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_1
                        lcl_5 = (lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 8):
                    lcl_4 = parse_call__expr(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_0
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_1
                        lcl_5 = (lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 40):
                    lcl_4 = parse_call__expr(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_0
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_1
                        lcl_5 = (lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 42):
                    lcl_4 = parse_call__expr(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_0
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_1
                        lcl_5 = (lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 41):
                    lcl_4 = parse_call__expr(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_0
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_1
                        lcl_5 = (lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 39):
                    lcl_4 = parse_call__expr(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_0
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_1
                        lcl_5 = (lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 38):
                    lcl_4 = parse_call__expr(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_0
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_1
                        lcl_5 = (lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                else:
                    lcl_4 = (_off_0, 'btr lookahead failed')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_2 = lcl_4
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'btr got EOF')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_call__expr(prim__state, prim__tokens):
        lcl_0 = parse_atomExpr(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_call__expr(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_cons(prim__state, prim__tokens):
        lcl_0 = 40
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'UPPER not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = prim__tokens.offset
            _off_1 = lcl_1
            lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_1:
                lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_3 = lcl_3.idint
                if (lcl_3 == 19):
                    lcl_4 = parse_slots(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_0
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_1
                        lcl_5 = Cons(lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                else:
                    lcl_4 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                    lcl_5 = _slot_0
                    lcl_5 = lcl_5.value
                    lcl_6 = []
                    lcl_4 = Cons(lcl_4, lcl_5, lcl_6)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_2 = lcl_4
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_1, 'cons got EOF')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_expr(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 35):
                lcl_3 = parse_expr2(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 10):
                lcl_3 = parse_bind__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 12):
                lcl_3 = parse_bind__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 5):
                lcl_3 = parse_bind__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 15):
                lcl_3 = parse_bind__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 14):
                lcl_3 = parse_bind__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 13):
                lcl_3 = parse_bind__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 34):
                lcl_3 = parse_expr2(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 11):
                lcl_3 = parse_bind__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 6):
                lcl_3 = parse_bind__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 16):
                lcl_3 = parse_bind__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 18):
                lcl_3 = parse_expr2(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 30):
                lcl_3 = parse_expr2(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 32):
                lcl_3 = parse_expr2(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 33):
                lcl_3 = parse_expr2(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 19):
                lcl_3 = parse_expr2(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 8):
                lcl_3 = parse_expr2(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 40):
                lcl_3 = parse_expr2(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 42):
                lcl_3 = parse_expr2(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 41):
                lcl_3 = parse_expr2(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 39):
                lcl_3 = parse_expr2(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 38):
                lcl_3 = parse_expr2(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'expr lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'expr got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_expr2(prim__state, prim__tokens):
        lcl_0 = parse_boolor(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_1:
                lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_3 = lcl_3.idint
                if (lcl_3 == 21):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_4 = _py_local_t
                    _slot_1 = lcl_4
                    lcl_4 = parse_expr(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                        lcl_6 = _slot_0
                        lcl_7 = _slot_2
                        lcl_7 = TCO(lcl_7)
                        lcl_5 = Fun(lcl_5, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                else:
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_2 = lcl_4
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'expr2 got EOF')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_expr__cont(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 10):
                lcl_3 = parse_bind__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 12):
                lcl_3 = parse_bind__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 5):
                lcl_3 = parse_bind__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 15):
                lcl_3 = parse_bind__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 14):
                lcl_3 = parse_bind__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 24):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_expr(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = _slot_1
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 13):
                lcl_3 = parse_bind__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 11):
                lcl_3 = parse_bind__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 6):
                lcl_3 = parse_bind__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 16):
                lcl_3 = parse_bind__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'expr_cont lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'expr_cont got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_interactive(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 35):
                lcl_3 = parse_interactive__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 10):
                lcl_3 = parse_stmt(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 12):
                lcl_3 = parse_stmt(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 5):
                lcl_3 = parse_stmt(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 15):
                lcl_3 = parse_stmt(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 14):
                lcl_3 = parse_stmt(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 13):
                lcl_3 = parse_stmt(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 34):
                lcl_3 = parse_interactive__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 11):
                lcl_3 = parse_stmt(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 6):
                lcl_3 = parse_stmt(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 16):
                lcl_3 = parse_stmt(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 18):
                lcl_3 = parse_interactive__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 30):
                lcl_3 = parse_interactive__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 32):
                lcl_3 = parse_interactive__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 33):
                lcl_3 = parse_interactive__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 19):
                lcl_3 = parse_interactive__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 8):
                lcl_3 = parse_interactive__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 40):
                lcl_3 = parse_interactive__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 42):
                lcl_3 = parse_interactive__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 41):
                lcl_3 = parse_interactive__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 39):
                lcl_3 = parse_interactive__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 38):
                lcl_3 = parse_interactive__expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'interactive lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'interactive got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_interactive__expr(prim__state, prim__tokens):
        lcl_0 = parse_expr2(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_interactive__expr(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_match__case(prim__state, prim__tokens):
        lcl_0 = parse_pat(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = 25
            try:
                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                if (_py_local_tk.idint is lcl_1):
                    prim__tokens.offset += 1
                else:
                    _py_local_tk = None
            except IndexError:
                _py_local_tk = None
            lcl_1 = _py_local_tk
            _slot_1 = lcl_1
            lcl_1 = (_slot_1 is None)
            if lcl_1:
                lcl_2 = prim__tokens.offset
                lcl_2 = (lcl_2, 'quote => not match')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            else:
                lcl_2 = parse_expr(prim__state, prim__tokens)
                _slot_2_check = lcl_2
                lcl_2 = _slot_2_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_2_check
                else:
                    lcl_3 = _slot_2_check[1]
                    lcl_3 = lcl_3
                    _slot_2 = lcl_3
                    lcl_3 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                    lcl_4 = _slot_0
                    lcl_5 = _slot_2
                    lcl_3 = (lcl_3, lcl_4, lcl_5)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_match__cases(prim__state, prim__tokens):
        lcl_0 = parse_rbnf__sep__list__4(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_module(prim__state, prim__tokens):
        lcl_0 = parse_rbnf__sep__list__2(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_pat(prim__state, prim__tokens):
        lcl_0 = parse_boolor(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__list__5(prim__state, prim__tokens):
        lcl_0 = parse_btr(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__list__5(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__0(prim__state, prim__tokens):
        lcl_0 = parse_bind(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__0(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__1(prim__state, prim__tokens):
        lcl_0 = parse_cons(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__1(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__2(prim__state, prim__tokens):
        lcl_0 = parse_ID(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__2(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__3(prim__state, prim__tokens):
        lcl_0 = parse_slot(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__3(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__4(prim__state, prim__tokens):
        lcl_0 = parse_match__case(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__4(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__6(prim__state, prim__tokens):
        lcl_0 = parse_expr(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__6(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_slot(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 18):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 40):
                lcl_3 = parse_ID(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 41):
                lcl_3 = parse_ID(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'slot lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'slot got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_slots(prim__state, prim__tokens):
        lcl_0 = 19
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote ( not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_rbnf__sep__list__3(prim__state, prim__tokens)
            _slot_1_check = lcl_1
            lcl_1 = _slot_1_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_1_check
            else:
                lcl_2 = _slot_1_check[1]
                lcl_2 = lcl_2
                _slot_1 = lcl_2
                lcl_2 = 20
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_2 = lcl_2
                lcl_2 = (_slot_2 is None)
                if lcl_2:
                    lcl_3 = prim__tokens.offset
                    lcl_3 = (lcl_3, 'quote ) not match')
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = lcl_3
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                else:
                    lcl_3 = _slot_1
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_stmt(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 10):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_binds(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                    lcl_5 = _slot_1
                    lcl_4 = Let(lcl_4, True, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 12):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_module(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                    lcl_5 = _slot_1
                    lcl_4 = Open(lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 5):
                lcl_3 = parse_LET(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = parse_binds(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_1
                        lcl_5 = Let(lcl_5, False, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 15):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_bop(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = 39
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_2 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'INT not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_1
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_2
                        lcl_7 = lcl_7.value
                        lcl_7 = int(lcl_7)
                        lcl_5 = Infix(lcl_5, True, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 14):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_bop(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = 39
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_2 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'INT not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_1
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_2
                        lcl_7 = lcl_7.value
                        lcl_7 = int(lcl_7)
                        lcl_5 = Infix(lcl_5, False, lcl_6, lcl_7)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 13):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_module(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                    lcl_5 = _slot_1
                    lcl_4 = Import(lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 11):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_expr(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                    lcl_5 = _slot_1
                    lcl_4 = Do(lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 6):
                lcl_3 = parse_LET(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = parse_binds(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_1
                        lcl_5 = Let(lcl_5, False, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 16):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_rbnf__sep__list__1(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                    lcl_5 = _slot_1
                    lcl_4 = Data(lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'stmt lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'stmt got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0
    return parse_START
