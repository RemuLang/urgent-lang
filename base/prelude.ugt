module Pre

infixr <| 0
infixl |> 0
infixl |>> 5
infixl <<| 5
let <| = f -> x -> f x
let |> = x -> f -> f x
let |>> = f -> g -> x -> g (f x)
let <<| = f -> g -> x -> f (g x)

let from_py = pyfunc -> arg -> pyfunc.(arg)
let to_py = extern "to_py_callable"

let print = from_py extern "print"
let failwith = extern "failwith"

let imp = 
    let imp = from_py extern "__import__"
    let imp = imp "importlib"
    in from_py <| imp.import_module

let io = imp "io"
let op = imp "operator"
let repr = from_py extern "repr"

// arithmetic operators

infixl + 10
infixl - 10
infixl * 20
infixl / 20
infixl \\ 20
infixr ^ 30
infixl !! 50

let _add = op.add
let _sub = op.sub
let _mul = op.mul
let _pow = op.pow
let _fdiv = op.truediv
let _sdiv = op.floordiv
let _item = op.getitem

let + = x -> y -> _add.(x, y)
let - = x -> y -> _sub.(x, y)
let * = x -> y -> _mul.(x, y)
let \\ = x -> y -> _sdiv.(x, y)
let / = x -> y -> _fdiv.(x, y)
let ^ = x -> y -> _pow.(x, y)
let !! = x -> y -> _item.(x, y)

let setattr = x -> y -> v -> (extern "setattr").(x, y, v)

// cmp operations
infixl < 8
infixl > 8
infixl >= 8
infixr <= 8
infixl == 8

let _lt = op.lt
let _gt = op.gt
let _eq = op.eq


let < = x -> y -> _lt.(x, y)
let > = x -> y -> _gt.(x, y)
let == = x -> y -> _eq.(x, y)
let >= = 
    let _ge = op.ge in
    x -> y -> _ge.(x, y)
let <= =
    let _le = op.le in
    x -> y -> _le.(x, y)

// list

infixr :: 1
data Cons(_, _), Nil
let :: = Cons


// control flow

// TODO: use bytecode to write one that uses loops
rec each = f -> seq ->
    seq match
        [] => (),
        hd :: tl =>
            do f hd
            in each f tl

rec for = seq -> f ->
    seq match
        [] => (),
        hd :: tl =>
            do f hd
            in for tl f

let fori =
    rec fori = i -> seq -> f ->
        seq match
        [] => (),
        hd :: tl =>
            do f i hd
            in fori (i + 1) tl f
    in fori

rec while = cond -> f ->
    cond () ?
        do f ()
        in while cond f
    else ()

infixl `contains` 6

rec contains = seq -> elem ->
    seq match
        [] => False,
        hd :: tl =>
        hd == elem ?
            True
        else
        contains tl elem


let reverse =
    rec reverse_impl = feed -> left ->
        left match
            [] => feed,
            hd :: tl =>
                reverse_impl (hd::feed) tl
    in reverse_impl []

let map =
    rec map_impl = feed -> (f, left) ->
        left match
            [] => feed,
            hd :: tl => map_impl (f hd :: feed) (f, tl)
    in f -> xs -> reverse <| map_impl [] (f, xs)


let join =
    let sio = io.StringIO
    rec join_impl = write -> sep -> strs ->
        strs match
            [] => (),
            [hd] => write.(hd),
            hd :: tl =>
                do write.(hd)
                do write.(sep)
                in join_impl write sep tl
    in sep -> strs ->
        let io = sio.()
        do join_impl io.write sep strs
        in  io.getvalue.()

let surround = (l, r) -> x -> l + x + r

do setattr [].__class__ "repr" <| to_py (x -> "[]")
do setattr [1].__class__ "__repr__" <|
     let f = map repr |>> join ", " |>> surround ("[", "]")
     in to_py f

let to_py_list = xs ->
    let ret = (extern "list").()
    do each (from_py ret.append) xs
    in ret

let ref =
    let dict = extern "dict"
    let type = extern "type"
    let list = extern "list"
    let pair = to_py_list [
            ("__slots__", to_py_list ["contents"]),
            ("__repr__",
                    let repr = extern "repr" in
                    let func = x -> "ref " + repr.(x.contents)
                    in to_py func)
        ]
    let py_ref_make = type.("ref", (), dict.(pair))
    in contents ->
        let ref = py_ref_make.()
        do (extern "set_contents").(ref,  contents)
        in ref

infixl := 5
let := = x -> y -> (extern "set_contents").(x, y)

let ! = x -> x.contents
let not = 
    let _not = op.not_ in
    x -> _not.(x)

infixl `to` 3
let to = 
    rec range_impl = xs -> start -> end ->
        start == end ?
            xs
        else
            let end = end - 1
            in range_impl (end :: xs) start end
    in range_impl []

let for_pylist = xs -> f ->
    let n = extern "len".(xs)
    let i = ref 0
    in while { !i < n } {
        let e = !i in
        do f (xs !! e)
        in i := e + 1
    }

let fori_pylist = xs -> f ->
    let n = extern "len".(xs)
    let i = ref 0
    in while { !i < n } {
        let e = !i in
        do f e (xs !! e)
        in i := e + 1
    }
