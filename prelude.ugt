module Pre

infixr <| 0
let <| = f -> x -> f x
let print = extern "print"
let imp = extern "__import__"
let toolz = imp "toolz"
let curry = toolz.curry
let op = imp "operator"

infixl + 10
infixl * 20
infixr ^ 30
let + = curry <| op.add
let * = curry <| op.mul
let ^ = curry <| op.pow

infixl |> 0
let |> = x -> f -> f x

infixr :: 1
data Cons(_, _), Nil
let :: = Cons
