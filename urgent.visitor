algebra Term:
    Def(loc, id_list, expr: repr)
    Do(loc, expr: repr)
    Open(loc, expr: repr)
    Sort(loc, id, type: repr)
    Cons(loc, id, type: repr)
    Infix(loc, is_right_assoc: bool, precedence: int)
    Pat(loc, pat: repr, expr: repr)

    Let(loc, is_rec: bool, bound_expr: repr, body_expr: repr)
    Import(loc, expr: repr)
    Match(loc, val_to_match: repr, cases: list)
    If(loc, cond: repr, tc: repr, fc: repr)
    Fun(loc, pat:repr, body: repr)
    Imply(loc, pat:repr, body: repr)
    Bin(head: repr, tl: list)
    Call(f: repr, arg: repr)
    List(loc, elts: list)
    Record(loc, fields: list, row: "_typing.Optional")
    Tuple(loc, elts: list)
    Lit(loc, value: object)
    Ann(loc, expr: repr, type: repr)
    Var(loc, id: str)
    Field(loc, base: repr, attr: str)

    Coerce(loc, expr:repr)
    Extern(loc, s: str)
